<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My coding projects and solutions</title>
    <description>A blog about my coding projects and how I solve coding challenges.</description>
    <link>https://paulwizviz.github.io/</link>
    <atom:link href="https://paulwizviz.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 04 Jul 2021 09:49:43 +0100</pubDate>
    <lastBuildDate>Sun, 04 Jul 2021 09:49:43 +0100</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Go and Rust workspace and modules -- A comparison</title>
        <description>&lt;h2 id=&quot;about-this-post&quot;&gt;About this post&lt;/h2&gt;

&lt;p&gt;It is rare, if ever, for any major project to involve only a single source file. So when you start a major software project, it is important to do so on the right foundation. A software project that is able to scale easily is one where the project is organised around modules where each module address a separate concern.&lt;/p&gt;

&lt;p&gt;In this post, I am going to compare Go and Rust approach to organising projects for scaling. I’ll demonstrate, using comparable file structures, ways to organise multiple modules in a single Github repository. I’ll use the term workspace in place of the term repository to coincide with Rust terminology.&lt;/p&gt;

&lt;p&gt;It is beyond the scope of this post to discuss in details Go and Rust concepts of modules and packages. Please refer to the respective language documentation for details. This blog will focus specifically on how to organise folders and files in a workspace such that Go and Rust projects are similar in layout for comparison.&lt;/p&gt;

&lt;h2 id=&quot;go-workspace&quot;&gt;Go workspace&lt;/h2&gt;

&lt;p&gt;It is worth noting that Go projects do not have a formal equivalence of a workspace. However, you can organise multiple Go modules around a single repository to achieve the similar effect as Rust’s workspace. The following layout is an example of a Go multiple-modules workspace.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;app1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;mathutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mylib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;strings_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this layout, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt; is a Go module for generating executables. Whereas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mylib&lt;/code&gt; is a Go module serving as an public sharable library. By convention, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mylib&lt;/code&gt; is a shareable module, it has name to that can be located via a valid url. In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt; which is not meant to share code with external projects, a simple one word name will suffice.&lt;/p&gt;

&lt;p&gt;Please refer to a working layout in my &lt;a href=&quot;https://github.com/paulwizviz/go-workspace&quot;&gt;Github repo&lt;/a&gt; for detail.&lt;/p&gt;

&lt;h2 id=&quot;rust-workspace&quot;&gt;Rust workspace&lt;/h2&gt;

&lt;p&gt;The equivalent layout in Rust is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workspace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.rs&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.rs&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.toml&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mylib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.rs&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.toml&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Cargo&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.toml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similar to the Go layout, you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt; module responsible for generating an executable and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mylib&lt;/code&gt; module responsible for generating libraries that you can share locally or via a package repository.&lt;/p&gt;

&lt;p&gt;Please refer to a working layout in my &lt;a href=&quot;https://github.com/paulwizviz/rust-workspace&quot;&gt;Github repo&lt;/a&gt; for detail.&lt;/p&gt;

&lt;h2 id=&quot;my-observations&quot;&gt;My observations&lt;/h2&gt;

&lt;p&gt;The main difference between a Go and a Rust workspace is a top level (i.e. at the workspace root) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; package manager for latter. A Go workspace does not have a top level package manager. So there is no direct relationship between its modules. In other words, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mylib&lt;/code&gt; will not be visible to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt; until the former has been pushed to the source repository and tag for Go workspace. So you can’t make changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mylib&lt;/code&gt; and for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt; to take effect at code time. In this respect, organising multiple Go modules in a single workspace may not offer much efficiency co-ordinating across modules. So the layout as presented in this post is very much a matter of personal choice.&lt;/p&gt;

&lt;p&gt;The other difference is in the tools. Rust has a package management tool known as Cargo, to create the layout mentioned above and also co-ordinate dependencies between the modules during the build process. Go tools do not have feature to create “standard” layout like Cargo. Go tools (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go install&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod&lt;/code&gt;) manages dependencies but it is done in conjunction with source code repositories hosting the Go codes. How well the flexibity afford by Go project layout and the fix layout afforded by Rust/Cargo in the context of refactoring, is a topic I will explore in future post.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Jun 2021 20:11:00 +0100</pubDate>
        <link>https://paulwizviz.github.io/go/rust/2021/06/30/go-rust-projects-layout.html</link>
        <guid isPermaLink="true">https://paulwizviz.github.io/go/rust/2021/06/30/go-rust-projects-layout.html</guid>
        
        
        <category>go</category>
        
        <category>rust</category>
        
      </item>
    
      <item>
        <title>Manipulating Docker containers via Go -- working with images</title>
        <description>&lt;h2 id=&quot;about-this-post&quot;&gt;About this post&lt;/h2&gt;

&lt;p&gt;In this post, I’ll show you ways to manipulate docker operations directly from your Go codes as an alternative to using Docker cli and docker-compose script.&lt;/p&gt;

&lt;p&gt;It is beyond the scope of this post to discuss in detail Docker’s architecture. Refer to the official
 &lt;a href=&quot;https://docs.docker.com/get-started/overview/&quot;&gt;Docker documentation&lt;/a&gt; for detail.&lt;/p&gt;

&lt;p&gt;For the purpose of this post, Docker is a client-server application where the server is running as a daemon in your platform (Linux, macOS and Windows).&lt;/p&gt;

&lt;p&gt;In essence, when you work with your Go code (i.e. the client) to interact with Docker you are basically interacting with Docker server via sockets.&lt;/p&gt;

&lt;p&gt;There are two ways you can get your Go code to interact with Docker server. One approach is to use Docker’s
 &lt;a href=&quot;https://docs.docker.com/engine/api/sdk/&quot;&gt;Go SDK&lt;/a&gt;. The other approach is to use the &lt;a href=&quot;https://docs.docker.com/engine/api/v1.41/&quot;&gt;RESTFul API&lt;/a&gt;. I’ll show you how it is done using the two approaches specifically when it comes to pulling Docker images from Docker registry.&lt;/p&gt;

&lt;h2 id=&quot;using-go-sdk&quot;&gt;Using Go SDK&lt;/h2&gt;

&lt;p&gt;The steps involve in using the SDK are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;STEP 1: Instantiate a Docker client;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;STEP 2: Use the client to call the operations you are interested in.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the example code to pull down an image:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/docker/docker/client&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Instantiate a Docker client based on default docker environment variables&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewClientWithOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromEnv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithAPIVersionNegotiation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Call the Image pull and in this case Docker is pulling ubuntu:latest from image repository&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImagePull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ubuntu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImagePullOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Stream download status to console&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;using-docker-engine-api&quot;&gt;Using Docker Engine API&lt;/h2&gt;

&lt;p&gt;In this approach, configure the Go Http client package to dial up docker socket. In the case of Linux and macOS, you can simply use unix socket as shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NewClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;DialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/var/run/docker.sock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For Windows programmers, please refer to the operating system’s equivalent.&lt;/p&gt;

&lt;p&gt;Next, connect your client to the Docker API.  The API to pull images is in the endpoint &lt;a href=&quot;https://docs.docker.com/engine/api/v1.41/#operation/ImageCreate&quot;&gt;/images/create&lt;/a&gt;. Yes, pull and create images have the same endpoint. So it can be confusing.&lt;/p&gt;

&lt;p&gt;Here is the example code demonstrating operations to call the API.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PullImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageName&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadCloser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;queryParams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;?fromImage=%s&amp;amp;fromSrc=-&amp;amp;tag=%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://v1.40/images/create%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queryParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;last-words&quot;&gt;Last words&lt;/h1&gt;

&lt;p&gt;As you can see the steps involved in creating a Go base client using SDK and API is fairly straightforward.&lt;/p&gt;

&lt;p&gt;However, you might be asking why not just execute shell commands via Docker’s cli with Docker Compose script. Of course, you could. What I have presented here are illustrations of alternative ways to manipulate docker from Go code. It is for you to find a use case appropriate for your project. For example, you might find it useful to create native apps manipulating a few Docker containers where you might not need platforms as complex as Kubernetes to manipulate containers.&lt;/p&gt;

&lt;p&gt;In this post I have covered one operation, which is to pull an image. The steps involved in manipulating other operations is broadly the same except for details such as SDK arguments or API parameters settings. I’ll cover those and other Docker components in future posts.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Jun 2021 13:00:00 +0100</pubDate>
        <link>https://paulwizviz.github.io/go/docker/2021/06/19/manipulating-docker-from-go.html</link>
        <guid isPermaLink="true">https://paulwizviz.github.io/go/docker/2021/06/19/manipulating-docker-from-go.html</guid>
        
        
        <category>go</category>
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>Go and Rust package management -- my initial observations</title>
        <description>&lt;h2 id=&quot;about-this-post&quot;&gt;About this post&lt;/h2&gt;

&lt;p&gt;In this post, I’ll share my research of package management for Go and Rust.&lt;/p&gt;

&lt;h2 id=&quot;go-package-management&quot;&gt;Go package management&lt;/h2&gt;

&lt;p&gt;I won’t go into detail of how Go manage dependencies, you can find it in the &lt;a href=&quot;https://blog.golang.org/using-go-modules&quot;&gt;official blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can augment you knowledge of Go packagement by reading this blogs &lt;a href=&quot;https://www.honeybadger.io/blog/golang-go-package-management/&quot;&gt;Evaluating Go’s Package Management and Module Systems&lt;/a&gt; by Ayooluwa Isaiah.&lt;/p&gt;

&lt;p&gt;It is also worth noting that Go does not enforce the way you organise your project layout. I highly recommend you use organise your project along the lines of the &lt;a href=&quot;https://github.com/golang-standards/project-layout&quot;&gt;Standard Go Project Layout&lt;/a&gt;. I am sure some of you would argue that the title of the layout does not imply they layout as a “standard”. Yes, I agree with you on that point but having followed the “standard”, I have found it a very good layout. In particular it helps to separate application code from support codes and easy for anyone working on the project to understand the intention behind the codes.&lt;/p&gt;

&lt;h2 id=&quot;rust-package-management&quot;&gt;Rust package management&lt;/h2&gt;

&lt;p&gt;I am a Rust newbie and still learning to code with Rust. As far as I can tell, Rust uses a package management tool call Cargo. For further details, please refer to this blog &lt;a href=&quot;https://opensource.com/article/20/3/rust-cargo&quot;&gt;Getting started with the Rust package manager, Cargo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don’t have a sense if there is a standard project layout but based on the layout generated by Cargo, it appears to be similar to Java’s maven project structure namely, the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;. Beyond that I can’t comment.&lt;/p&gt;

&lt;h2 id=&quot;my-observations&quot;&gt;My observations&lt;/h2&gt;

&lt;p&gt;As a newbie to Rust, all I would say about Rust/Cargo project layout seemed restrictive for me. But it maybe because I have not mastered the art of using Cargo fully, With the Go standard project layout, it allows me to organised my Go support code (some written in Go itself, Docker scripts, etc) cleanly and separate from the application code.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jun 2021 13:52:00 +0100</pubDate>
        <link>https://paulwizviz.github.io/go/rust/2021/06/12/go-rust-projects.html</link>
        <guid isPermaLink="true">https://paulwizviz.github.io/go/rust/2021/06/12/go-rust-projects.html</guid>
        
        
        <category>go</category>
        
        <category>rust</category>
        
      </item>
    
  </channel>
</rss>
