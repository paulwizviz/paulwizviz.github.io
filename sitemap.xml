<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My coding projects and solutions</title>
    <description>A blog about my coding projects and how I solve coding challenges.</description>
    <link>https://paulwizviz.github.io/</link>
    <atom:link href="https://paulwizviz.github.io/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 13 Jun 2021 14:04:13 +0100</pubDate>
    <lastBuildDate>Sun, 13 Jun 2021 14:04:13 +0100</lastBuildDate>
    <generator>Jekyll v3.9.0</generator>
    
      <item>
        <title>Go and Rust package management -- my initial observations</title>
        <description>&lt;h2 id=&quot;about-this-post&quot;&gt;About this post&lt;/h2&gt;

&lt;p&gt;In this post, I’ll share my research of package management for Go and Rust.&lt;/p&gt;

&lt;h2 id=&quot;go-package-management&quot;&gt;Go package management&lt;/h2&gt;

&lt;p&gt;I won’t go into detail of how Go manage dependencies, you can find it in the &lt;a href=&quot;https://blog.golang.org/using-go-modules&quot;&gt;official blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can augment you knowledge of Go packagement by reading this blogs &lt;a href=&quot;https://www.honeybadger.io/blog/golang-go-package-management/&quot;&gt;Evaluating Go’s Package Management and Module Systems&lt;/a&gt; by Ayooluwa Isaiah.&lt;/p&gt;

&lt;p&gt;It is also worth noting that Go does not enforce the way you organise your project layout. I highly recommend you use organise your project along the lines of the &lt;a href=&quot;https://github.com/golang-standards/project-layout&quot;&gt;Standard Go Project Layout&lt;/a&gt;. I am sure some of you would argue that the title of the layout does not imply they layout as a “standard”. Yes, I agree with you on that point but having followed the “standard”, I have found it a very good layout. In particular it helps to separate application code from support codes and easy for anyone working on the project to understand the intention behind the codes.&lt;/p&gt;

&lt;h2 id=&quot;rust-package-management&quot;&gt;Rust package management&lt;/h2&gt;

&lt;p&gt;I am a Rust newbie and still learning to code with Rust. As far as I can tell, Rust uses a package management tool call Cargo. For further details, please refer to this blog &lt;a href=&quot;https://opensource.com/article/20/3/rust-cargo&quot;&gt;Getting started with the Rust package manager, Cargo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don’t have a sense if there is a standard project layout but based on the layout generated by Cargo, it appears to be similar to Java’s maven project structure namely, the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt;. Beyond that I can’t comment.&lt;/p&gt;

&lt;h2 id=&quot;my-observations&quot;&gt;My observations&lt;/h2&gt;

&lt;p&gt;As a newbie to Rust, all I would say about Rust/Cargo project layout seemed restrictive for me. But it maybe because I have not mastered the art of using Cargo fully, With the Go standard project layout, it allows me to organised my Go support code (some written in Go itself, Docker scripts, etc) cleanly and separate from the application code.&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Jun 2021 13:52:00 +0100</pubDate>
        <link>https://paulwizviz.github.io/go/rust/2021/06/12/go-rust-projects.html</link>
        <guid isPermaLink="true">https://paulwizviz.github.io/go/rust/2021/06/12/go-rust-projects.html</guid>
        
        
        <category>go</category>
        
        <category>rust</category>
        
      </item>
    
  </channel>
</rss>
